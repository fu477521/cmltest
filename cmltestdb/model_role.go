// Code generated by rpc_gen. DO NOT EDIT.

package cmltestdb

import (
	"reflect"

	"git.pinquest.cn/qlb/brick/dbproxy"
)

var ModelRole = &dbproxy.ModelObjectType{
	Name: "cmltest.ModelRole",
	PrimaryKey: "id",
	PrimaryKeyType: "uint64",
	FieldList: &dbproxy.ObjectFieldList{
		List: []*dbproxy.ObjectField{
			{
				FieldName: "id",
				Type:      "uint64",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  false,
				IsArray:   false,
			},
			{
				FieldName: "created_at",
				Type:      "uint32",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  false,
				IsArray:   false,
			},
			{
				FieldName: "updated_at",
				Type:      "uint32",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  false,
				IsArray:   false,
			},
			{
				FieldName: "deleted_at",
				Type:      "uint32",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  false,
				IsArray:   false,
			},
			{
				FieldName: "corp_id",
				Type:      "uint32",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  true,
				IsArray:   false,
			},
			{
				FieldName: "app_id",
				Type:      "uint32",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  true,
				IsArray:   false,
			},
			{
				FieldName: "type",
				Type:      "uint32",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  true,
				IsArray:   false,
			},
			{
				FieldName: "name",
				Type:      "string",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "max=30",
				DbDef:     "type:varchar(30)",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  true,
				IsArray:   false,
			},
			{
				FieldName: "view_order",
				Type:      "uint32",
				RefType:   "",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  true,
				IsArray:   false,
			},
			{
				FieldName: "detail",
				Type:      "object",
				RefType:   "cmltest.ModelRole.Detail",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "type: text",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  true,
				IsArray:   false,
			},
			{
				FieldName: "permission",
				Type:      "object",
				RefType:   "cmltest.ModelRole.Permission",
				FormName:  "",
				FormType:  "",
				Validate:  "",
				DbDef:     "type: text",
				ScopeCond: "",
				LinkTo:    "",
				Editable:  true,
				IsArray:   false,
			},
		},
	},
}

func init() {
	ObjectTypeList = append(ObjectTypeList, ModelRole)
}

var IdModelRole = &dbproxy.StructField{
	StructFieldName: "Id",
	DbFieldName:     "id",
}

var CreatedAtModelRole = &dbproxy.StructField{
	StructFieldName: "CreatedAt",
	DbFieldName:     "created_at",
}

var UpdatedAtModelRole = &dbproxy.StructField{
	StructFieldName: "UpdatedAt",
	DbFieldName:     "updated_at",
}

var DeletedAtModelRole = &dbproxy.StructField{
	StructFieldName: "DeletedAt",
	DbFieldName:     "deleted_at",
}

var CorpIdModelRole = &dbproxy.StructField{
	StructFieldName: "CorpId",
	DbFieldName:     "corp_id",
}

var AppIdModelRole = &dbproxy.StructField{
	StructFieldName: "AppId",
	DbFieldName:     "app_id",
}

var TypeModelRole = &dbproxy.StructField{
	StructFieldName: "Type",
	DbFieldName:     "type",
}

var NameModelRole = &dbproxy.StructField{
	StructFieldName: "Name",
	DbFieldName:     "name",
}

var ViewOrderModelRole = &dbproxy.StructField{
	StructFieldName: "ViewOrder",
	DbFieldName:     "view_order",
}

var DetailModelRole = &dbproxy.StructField{
	StructFieldName: "Detail",
	DbFieldName:     "detail",
}

var PermissionModelRole = &dbproxy.StructField{
	StructFieldName: "Permission",
	DbFieldName:     "permission",
}

type ModelRoleReflect struct {
	Id dbproxy.StructFieldWithObj
	CreatedAt dbproxy.StructFieldWithObj
	UpdatedAt dbproxy.StructFieldWithObj
	DeletedAt dbproxy.StructFieldWithObj
	CorpId dbproxy.StructFieldWithObj
	AppId dbproxy.StructFieldWithObj
	Type dbproxy.StructFieldWithObj
	Name dbproxy.StructFieldWithObj
	ViewOrder dbproxy.StructFieldWithObj
	Detail dbproxy.StructFieldWithObj
	Permission dbproxy.StructFieldWithObj
}

func NewModelRoleReflect(i interface{}) *ModelRoleReflect {
	obj := reflect.ValueOf(i)
	if obj.Kind() == reflect.Ptr {
	    obj = obj.Elem()
	}
	r := &ModelRoleReflect{
		Id: dbproxy.StructFieldWithObj{Field: IdModelRole, Obj: obj},
		CreatedAt: dbproxy.StructFieldWithObj{Field: CreatedAtModelRole, Obj: obj},
		UpdatedAt: dbproxy.StructFieldWithObj{Field: UpdatedAtModelRole, Obj: obj},
		DeletedAt: dbproxy.StructFieldWithObj{Field: DeletedAtModelRole, Obj: obj},
		CorpId: dbproxy.StructFieldWithObj{Field: CorpIdModelRole, Obj: obj},
		AppId: dbproxy.StructFieldWithObj{Field: AppIdModelRole, Obj: obj},
		Type: dbproxy.StructFieldWithObj{Field: TypeModelRole, Obj: obj},
		Name: dbproxy.StructFieldWithObj{Field: NameModelRole, Obj: obj},
		ViewOrder: dbproxy.StructFieldWithObj{Field: ViewOrderModelRole, Obj: obj},
		Detail: dbproxy.StructFieldWithObj{Field: DetailModelRole, Obj: obj},
		Permission: dbproxy.StructFieldWithObj{Field: PermissionModelRole, Obj: obj},
	}

	return r
}

